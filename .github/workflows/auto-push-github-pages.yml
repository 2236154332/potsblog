# 脚本作用：自动发布到 gh-pages 分支生成 Github Pages
# 这里关闭了触发 workflow 的条件，那是因为我本地安装了 npm install hexo-deployer-git --save 插件包
# 因此当我执行 `hexo d` 命令时，会自动推送到 `gh-pages` 分支
# 我本地默认配置了 gitee 和 github 的 gh-pages 详见 `_config.yml` 文件中 deploy 配置（文档地址：https://hexo.io/docs/one-command-deployment）
# 因为 gitee 上面不太方便使用和 GitHub Actions 一样的功能，因此，一般我推送到 gh-pages 的工作流程是：
# 1. git pull origin main 拉取最新代码，然后在 main 分支上写文章
# 2. nvm use 16.2.0 # 使用 node 16.2.0 版本
# 3. hexo cl # 清除生成的静态文件
# 4. hexo g # 生成静态页面至 public 页面
# 5. hexo d # 这一步会自动帮我推送到 gitee 和 GitHub 的 gh-pages 分支
# 6. git add -A && git commit -sm '添加了新文章'
# 7. git push -u origin main # 推送变动到 main 分支
name: Deploy GitHub Pages

on:
  # 在 main 分支发生 push 时执行
  push:
    branches:
      - main
  # 通过定时任务执行
#  schedule:
#    - cron: "30 10,23 * * *"

env: # 设置环境变量
  TZ: Asia/Shanghai

jobs:
  deploy-github-pages:
    if: true # 这里为 true 时，才会执行工作流。这里通过了 https://docs.github.com/zh/actions/learn-github-actions/contexts#determining-when-to-use-contexts 巧妙的实现了禁用工作流的功能
    name: Auto push gh-pages branch
    runs-on: ubuntu-latest
    steps:
      # 1. 通过 actions/checkout action 获取项目源码。官方 actions 库：https://github.com/actions
      - name: '#1. Checkout codes'
        uses: actions/checkout@master
      # 2. 部署 Node.js 环境 https://github.com/actions/setup-node
      - name: '#2. Setup Node.js environment'
        uses: actions/setup-node@v3
        with:
          node-version: '16.2.0'
      # 3. check
      - name: '#3. Install and check software'
        run: |
          node -v
          npm -v
          rm -rf ./node_modules
          npm install -g hexo-cli
          npm install
          hexo --version
      # 4. 发布到 GitHub Pages
      - name: '#4. Deploy GitHub Pages'
        run: |
          # eg: https://github.com/pudongping/pudongping.github.io
          RemoteAddr=`git remote get-url --push origin`
          UserName=`git log -1 --pretty=format:'%an'`
          UserEmail=`git log -1 --pretty=format:'%ae'`
          DeployBranch=gh-pages
          CommitInfo=`git describe --all --always --long`
          # eg: github.com/pudongping/pudongping.github.io
          RemoteAddr=`echo $RemoteAddr | awk -F'://' '{print $2}'`
          # 在每个工作流作业开始时，GitHub 会自动创建唯一的 GITHUB_TOKEN 机密以在工作流中使用 https://docs.github.com/zh/actions/security-guides/automatic-token-authentication
          RemoteAddr=https://${UserName}:${{secrets.GITHUB_TOKEN}}@${RemoteAddr}
          # 清除生成的静态文件
          hexo cl
          # 生成静态页面至 public 页面
          hexo g
          # 直接将 public 目录改名成 .deploy_git 因为 public 自身被添加到忽略文件中，因此可以通过直接改名的方式来处理
          mv public .deploy_git
          cd .deploy_git
          git config --global init.defaultBranch $DeployBranch
          git init
          git config user.name ${UserName}
          git config user.email ${UserEmail}
          git remote add origin $RemoteAddr
          git status
          git add -A
          git commit -sm "Site updated:"`date +"%Y-%m-%d_%H:%M:%S"`
          git remote -vvv
          git push -f -u origin HEAD:$DeployBranch
          git status
          git log -5 --oneline
